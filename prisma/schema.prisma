// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionCategory {
  BILL // or recurring expenses? not sure yet about this.
  EXPENSE
  LOAN
}

enum LoanStatus {
  PENDING
  ACTIVE
  REPAID
  OVERDUE
}

enum GroupRole {
  ADMIN
  MEMBER
}

enum NotificationType {
  PAYMENT_DUE
  LOAN_REMINDER
  EXPENSE_ADDED
  BALANCE_UPDATE
}



model User {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique @default(uuid())
  createdAt   DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime  @updatedAt @db.Timestamptz(3)
  firstName   String    @default("") 
  lastName    String    @default("")
  email       String    @unique
  phone       String?   @default("") @db.VarChar(50)
  dob         DateTime? @db.Timestamptz(3)
  createdGroups     Group[]
  supabaseUid String    @unique
  expoPushToken String
  enableEmailNotifications  Boolean @default(true)
  enablePushNotifications Boolean @default(true)
 
  memberships  GroupMembership[]
  transactions  Transaction[]  @relation("PaidBy")
  transactionSplits TransactionSplit[]
  lentLoans         Loan[]         @relation("Lender")
  borrowedLoans     Loan[]         @relation("Borrower")
  notifications     Notification[]
  isDeleted  Boolean  @default(false)  
}

model Group {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique @default(uuid())
  createdAt   DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime  @updatedAt @db.Timestamptz(3)
  description String    @default("")
  name        String
  
  creatorId   Int
  creator     User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)  
  
  members     GroupMembership[]
  transactions Transaction[]
  loans       Loan[]
  isDeleted   Boolean  @default(false)  
}

model GroupMembership {
  uuid        String    @unique @default(uuid())
  createdAt   DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime  @updatedAt @db.Timestamptz(3)
  joinedAt    DateTime  @default(now()) @db.Timestamptz(3)
  
  groupId     Int
  group       Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  role        GroupRole @default(MEMBER)
  isDeleted   Boolean  @default(false)  // Added field

  @@id([groupId, userId])
}

model Transaction {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique @default(uuid())
  createdAt   DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime  @updatedAt @db.Timestamptz(3)
  amount      Float
  description String
  category    TransactionCategory
  date        DateTime  @db.Timestamptz(3)
 
  groupId     Int
  group       Group?    @relation(fields: [groupId], references: [id])
 
  payerId     Int
  payer       User      @relation("PaidBy", fields: [payerId], references: [id])
 
  splits      TransactionSplit[]
  isDeleted   Boolean  @default(false)  // Added field
}

model TransactionSplit {
  id              Int       @id @default(autoincrement())
  uuid            String    @unique @default(uuid())
  createdAt   DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime  @updatedAt @db.Timestamptz(3)
  amount        Float
  isPaid        Boolean
  paidAt        DateTime?  @db.Timestamptz(3)
 
  transactionId Int
  transaction   Transaction  @relation(fields: [transactionId], references: [id])
 
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
 
  isDeleted     Boolean  @default(false)  // Added field
}

model Loan {
  id              Int       @id @default(autoincrement())
  uuid            String    @unique @default(uuid())
  createdAt   DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime  @updatedAt @db.Timestamptz(3)
  amount         Float
  description    String
  dueDate        DateTime?  @db.Timestamptz(3)
  isAcknowledged Boolean
  status         LoanStatus @default(PENDING)

  groupId        Int
  group          Group     @relation(fields: [groupId], references: [id])

  lenderId       Int
  lender         User      @relation("Lender", fields: [lenderId], references: [id])

  borrowerId     Int
  borrower       User      @relation("Borrower", fields: [borrowerId], references: [id])

  isDeleted      Boolean  @default(false)  // Added field
}

model Notification {
  id        Int       @id @default(autoincrement())
  uuid      String    @unique @default(uuid())
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime  @updatedAt @db.Timestamptz(3)
  type      NotificationType
  message   String
  isRead    Boolean

  userId    Int
  user      User      @relation(fields: [userId], references: [id])

  isDeleted Boolean  @default(false)  // Added field
}
