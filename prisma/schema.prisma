// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionCategory {
  BILL
  EXPENSE
  LOAN
}

enum TransactionDirection {
  IN
  OUT
}

enum LoanStatus {
  ACTIVE
  REPAID
  OVERDUE
}

enum GroupRole {
  ADMIN
  MEMBER
}

enum NotificationType {
  PAYMENT_DUE
  LOAN_REMINDER
  EXPENSE_ADDED
  BALANCE_UPDATE
}

model User {
  id                       Int       @id @default(autoincrement())
  uuid                     String    @unique @default(uuid())
  createdAt                DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt                DateTime  @updatedAt @db.Timestamptz(3)
  firstName                String    @default("")
  lastName                 String    @default("")
  email                    String    @unique
  phone                    String?   @default("") @db.VarChar(50)
  createdGroups            Group[]
  supabaseUid              String    @unique
  expoPushToken            String    @default("")
  enableEmailNotifications Boolean   @default(true)
  enablePushNotifications  Boolean   @default(true)

  memberships       GroupMembership[]
  transactions      Transaction[]      @relation("PaidBy")
  transactionSplits TransactionSplit[]
  lentLoans         Loan[]             @relation("Lender")
  borrowedLoans     Loan[]             @relation("Borrower")
  notifications     Notification[]
  isDeleted         Boolean            @default(false)
}

model Group {
  id          Int      @id @default(autoincrement())
  uuid        String   @unique @default(uuid())
  createdAt   DateTime @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime @updatedAt @db.Timestamptz(3)
  description String   @default("")
  name        String

  creator   User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId Int

  members      GroupMembership[]
  transactions Transaction[]
  loans        Loan[]
  isDeleted    Boolean           @default(false)
}

model GroupMembership {
  uuid      String   @unique @default(uuid())
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
  joinedAt  DateTime @default(now()) @db.Timestamptz(3)

  group   Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId Int

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  role      GroupRole @default(MEMBER)
  isDeleted Boolean   @default(false)

  @@id([groupId, userId])
}

model Transaction {
  id          Int                 @id @default(autoincrement())
  uuid        String              @unique @default(uuid())
  createdAt   DateTime            @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime            @updatedAt @db.Timestamptz(3)
  amount      Float
  description String
  category    TransactionCategory
  direction   TransactionDirection
  date        DateTime            @db.Timestamptz(3)
  title       String

  group   Group? @relation(fields: [groupId], references: [id])
  groupId Int?

  payer   User @relation("PaidBy", fields: [payerId], references: [id])
  payerId Int

  loan   Loan? @relation(fields: [loanId], references: [id])
  loanId Int?

  splits    TransactionSplit[]
  isDeleted Boolean            @default(false)
}

model TransactionSplit {
  id        Int       @id @default(autoincrement())
  uuid      String    @unique @default(uuid())
  createdAt DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime  @updatedAt @db.Timestamptz(3)
  amount    Float
  isPaid    Boolean
  paidAt    DateTime? @db.Timestamptz(3)

  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int

  user   User @relation(fields: [userId], references: [id])
  userId Int

  isDeleted Boolean @default(false)
}
model Loan {
  id             Int        @id @default(autoincrement())
  uuid           String     @unique @default(uuid())
  createdAt      DateTime   @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime   @updatedAt @db.Timestamptz(3)
  dueDate        DateTime?  @db.Timestamptz(3)
  isAcknowledged Boolean
  status         LoanStatus @default(ACTIVE)
  amount         Float
  description    String

  group   Group? @relation(fields: [groupId], references: [id])
  groupId Int?

  transactions Transaction[]

  lender   User @relation("Lender", fields: [lenderId], references: [id])
  lenderId Int

  borrower   User @relation("Borrower", fields: [borrowerId], references: [id])
  borrowerId Int

  isDeleted Boolean @default(false)
}



model Notification {
  id        Int              @id @default(autoincrement())
  uuid      String           @unique @default(uuid())
  createdAt DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt DateTime         @updatedAt @db.Timestamptz(3)
  type      NotificationType
  message   String
  isRead    Boolean

  users     User[]
  isDeleted Boolean @default(false)
}
